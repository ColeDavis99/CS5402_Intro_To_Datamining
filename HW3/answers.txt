1a) Coverate of each item set
education = highSchool, cardCategory = Red
coverage = 1

married = no, income = low, creditLine = 7k
coverage = 0


1b) Every association rule that could be generated from the 2-item set
of married = no, cardCategory = Blue

if married = no then cardCategory = Blue
if cardCategory = Blue then married = no
if _ then married = no and cardCategory = Blue


1c) Compute the accuracy of each rule listed below as a fraction.
If married = yes then income = middle
Accuracy: 2/3

If married = no and education = college 
then creditLine = 10k and cardCategory = Blue
Accuracy: 2/3

If _ then cardCategory = Red and married = yes
Accuracy: 0/7




2) [See the 2.png screenshot for the WEKA part of the question]

Table for cardCategory = Blue
Values                      t           p               Accuracy
-----------------------+---------+--------------+----------------------+
married = yes               5           3               3/5
married = no                5           1               1/5
education = highSchool      5           3               3/5
education = college         5           1               1/5
income = ge50k              5           4               4/5
income = lt50k              5           0               0/5
creditCardDebt = low        5           2               2/5
creditCardDebt = high       5           2               2/5

Rule Generated: if income = ge50k then cardCategory = Blue



Table for cardCategory = Gold
Values                      t           p               Accuracy
-----------------------+---------+--------------+----------------------+
married = yes               5           2               2/5
married = no                5           4               4/5
education = highSchool      5           2               2/5
education = college         5           4               4/5
income = ge50k              5           1               1/5
income = lt50k              5           5               5/5
creditCardDebt = low        5           3               3/5
creditCardDebt = high       5           3               3/5

Rule Generated: if income = lt50k then cardCategory = Gold


Final Rule Listing:
if income = ge50k then cardCategory = Blue
if income = lt50k then cardCategory = Gold



3)
Weights are initialized to 2 (w_milk, w_beer, w_diapers, w_chips)
Ɵ = 2
α = 2
β = 0.5

instance    calculation                     predicted    actual      computed weights
x1          2*0 + 2*1 + 2*0 + 2*1 = 4>2     1            0           w_milk=2, w_beer=1, w_diapers=2, w_chips=1
x2          2*1 + 1*1 + 2*0 + 1*0 = 3>2     1            1           w_milk=2, w_beer=1, w_diapers=2, w_chips=1
x3          2*0 + 1*0 + 2*0 + 1*1 = 1<2     0            1           w_milk=2, w_beer=1, w_diapers=2, w_chips=2
x4          2*0 + 1*1 + 2*0 + 2*0 = 1<2     0            0           w_milk=2, w_beer=1, w_diapers=2, w_chips=2



4) Make a kd-tree where k=2 from the dataset provided.

//Sort non-decision attributes on the x dimension. Bring in each row's y dimension too as a tuple.
[(1,5), (2,8), (2,10), (3,20), (4,20), (5,30), (6,40), (7,50), (8,60)]

//Find median value of x in the list
Median: 4

//Make two sublists, one with x >= median and another with x < median.
[(1,5), (2,8), (2,10), (3,20), (4,20)]
[(5,30), (6,40), (7,50), (8,60)]

//Now sort the sublists based on the y value (already done coincidently)
[(1,5), (2,8), (2,10), (3,20), (4,20)]
[(5,30), (6,40), (7,50), (8,60)]

//Find median value of y for each sublist
[(1,5), (2,8), (2,10), (3,20), (4,20)];     Y Median: 10
[(5,30), (6,40), (7,50), (8,60)];           Y Median: 45

//Make two sublists for each sublist based on this Y median.
[(1,5), (2,8), (2,10)]
[(3,20), (4,20)]

[(5,30), (6,40)]
[(7,50), (8,60)]

//One iteration has been completed for each dimension (x and y) but each list does not 
//yet have a length of 1 so go back to x and repeat. (Already sorted by x coincidently)
[(1,5), (2,8), (2,10)]; X Median: 2
[(3,20), (4,20)];       X Median: 3.5; ~4

[(5,30), (6,40)];       X Median: 5.5; ~6
[(7,50), (8,60)];       X Median: 7.5; ~7

//Make each list into a sublist again
[(1,5)]
[(2,8), (2,10)]

[(3,20)]
[(4,20)]

[(5,30)]
[(6,40)]

[(7,50)]
[(8,60)]

//Sort the remaining list with two tuples based on Y value,
//compute the median, and then split it into a sublist. (Y Median is 9)

[(1,5)]

[(2,8)] 

[(2,10)]

[(3,20)]
[(4,20)]

[(5,30)]
[(6,40)]

[(7,50)]
[(8,60)]

//Now assemble the k/d tree.

                 [2,10]
                /
             (9)
            /   \
          (2)    [2,8]
         /  \
        /    [1,5]
      (10)
      /   \   [4,20]
     /     \ /
    /      (4)
   /         \
  /           [3,20]
(4)          
  \           [6,40]
   \         /  
    \      (6)
     \    /  \
      \  /    [5,30]
       (45)
         \    [8,60]
          \  /
           (7)
             \
              [7,50]